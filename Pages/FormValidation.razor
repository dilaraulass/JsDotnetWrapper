@page "/form"
@using JsDotnetWrapperDemo.Models
@inject IJSRuntime JS

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow rounded-4">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">🧾 JS Wrapper Form Validation</h3>

                    <div class="form-floating mb-3">
                        <input class="form-control" id="nameInput" placeholder="Name" @bind="user.Name" />
                        <label for="nameInput">Name</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input class="form-control" id="emailInput" placeholder="Email" @bind="user.Email" />
                        <label for="emailInput">Email</label>
                    </div>

                    <div class="form-floating mb-4">
                        <input type="number" class="form-control" id="ageInput" placeholder="Age" @bind="user.Age" />
                        <label for="ageInput">Age</label>
                    </div>

                    <button class="btn btn-primary w-100 mb-3" @onclick="Validate">
                        ✅ Validate (via JS)
                    </button>

                    @if (!string.IsNullOrWhiteSpace(message))
                    {
                        <div class="alert alert-success text-center fade-in shadow-sm rounded-2 p-3">
                            @message
                        </div>
                    }

                    @if (userList.Count > 0)
                    {
                        <h5 class="mt-4">📋 Validated Users</h5>
                        <ul class="list-group">
                            @foreach (var u in userList)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@u.Name</strong> - @u.Email
                                    </div>
                                    <span class="badge bg-secondary">@u.Age y/o</span>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User user = new();
    private string message = "";
    private List<User> userList = new();
    private DotNetObjectReference<FormValidation>? dotnetRef;

    protected override async Task OnInitializedAsync()
    {
        dotnetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("getAllUsersFromStorage", dotnetRef);
    }

    private async Task Validate()
    {
        await JS.InvokeVoidAsync("validateForm", user, dotnetRef);
    }

    [JSInvokable]
    public void ReceiveValidatedUser(User validated)
    {
        userList.Add(validated);
        message = $"✅ Kaydedildi: {validated.Name} ({validated.Email})";
        user = new();
        StateHasChanged();
    }

}
