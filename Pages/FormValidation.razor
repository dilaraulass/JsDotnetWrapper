@page "/form"
@using JsDotnetWrapperDemo.Models
@inject IJSRuntime JS

<div class="container mt-5">
    <div class="row">
        <!-- SOL TARAF -->
        <div class="col-md-5">
            <div class="card shadow-sm p-4 rounded-4 animate-left text-dark bg-light">
                <h4 class="text-primary mb-3">📘 Proje Hakkında</h4>
                <p>Bu form <strong>Blazor + JavaScript</strong> entegrasyonunu test etmek için hazırlanmıştır.</p>
                <ul>
                    <li>✅ Form verisi JavaScript ile doğrulanır.</li>
                    <li>📦 localStorage'da saklanır.</li>
                    <li>🔁 Blazor’a .NET üzerinden aktarılır.</li>
                </ul>
                <hr />
                <p class="text-muted small">
                    Geliştirici: <strong>Dilara Ulaş</strong><br />
                    Proje: <code>JsDotnetWrapperDemo</code>
                </p>
            </div>
        </div>

        <!-- SAĞ TARAF -->
        <div class="col-md-7">
            <div class="card shadow rounded-4 animate-right">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4 text-success">🧾 JS Wrapper Form Validation</h3>

                    <div class="form-floating mb-3">
                        <input class="form-control" id="nameInput" placeholder="Name" @bind="user.Name" />
                        <label for="nameInput">Name</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input class="form-control" id="emailInput" placeholder="Email" @bind="user.Email" />
                        <label for="emailInput">Email</label>
                    </div>

                    <div class="form-floating mb-4">
                        <input type="number" class="form-control" id="ageInput" placeholder="Age" @bind="user.Age" />
                        <label for="ageInput">Age</label>
                    </div>

                    <button class="btn btn-success w-100 mb-3" @onclick="Validate">
                        ✅ Validate (via JS)
                    </button>

                    @if (userList.Count > 0)
                    {
                        <h5 class="mt-4">📋 Validated Users</h5>
                        <ul class="list-group">
                            @foreach (var u in userList)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@u.Name</strong> - @u.Email
                                    </div>
                                    <div>
                                        <span class="badge bg-secondary me-2">@u.Age y/o</span>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(u.Email)">🗑 Sil</button>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="text-center text-muted mt-5 small">
    &copy; 2025 JsDotnetWrapperDemo - Dilara Ulaş
</footer>

@code {
    private User user = new();
    private List<User> userList = new();
    private DotNetObjectReference<FormValidation>? dotnetRef;

    protected override async Task OnInitializedAsync()
    {
        dotnetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("getAllUsersFromStorage", dotnetRef);
    }

    private async Task Validate()
    {
        if (dotnetRef is not null)
            await JS.InvokeVoidAsync("validateForm", user, dotnetRef);
    }

    [JSInvokable]
    public void ReceiveValidatedUser(User validated)
    {
        if (!userList.Any(u => u.Email == validated.Email))
            userList.Add(validated);

        user = new();
        StateHasChanged();
    }

    private async Task ConfirmDelete(string email)
    {
        if (dotnetRef is not null)
            await JS.InvokeVoidAsync("confirmAndDelete", email, dotnetRef);
    }

    [JSInvokable]
    public void RemoveUserFromList(string email)
    {
        userList = userList.Where(u => u.Email != email).ToList();
        StateHasChanged();
    }
}
